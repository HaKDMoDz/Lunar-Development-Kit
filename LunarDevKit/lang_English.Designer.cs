//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LunarDevKit {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class lang_English : global::System.Configuration.ApplicationSettingsBase {
        
        private static lang_English defaultInstance = ((lang_English)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new lang_English())));
        
        public static lang_English Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you want to save the project before exiting the Editor?")]
        public string SaveWorldMsg {
            get {
                return ((string)(this["SaveWorldMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you wish to exit Lunar Dev Kit?")]
        public string ExitEditorMsg {
            get {
                return ((string)(this["ExitEditorMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Scripts compiled successfully!")]
        public string CompileScriptsSuccess {
            get {
                return ((string)(this["CompileScriptsSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Levels built successfully!")]
        public string BuildLevelsSuccess {
            get {
                return ((string)(this["BuildLevelsSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Assets built successfully!")]
        public string BuildAssetsSuccess {
            get {
                return ((string)(this["BuildAssetsSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Game built successfully!")]
        public string BuildGameSuccess {
            get {
                return ((string)(this["BuildGameSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Scripts failed to compile!")]
        public string CompileScriptsFailed {
            get {
                return ((string)(this["CompileScriptsFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Levels failed to build!")]
        public string BuildLevelsFailed {
            get {
                return ((string)(this["BuildLevelsFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Assets failed to build!")]
        public string BuildAssetsFailed {
            get {
                return ((string)(this["BuildAssetsFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Game failed to build!")]
        public string BuildGameFailed {
            get {
                return ((string)(this["BuildGameFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("The world file could not be opened!")]
        public string OpenWorldFileFailed {
            get {
                return ((string)(this["OpenWorldFileFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(" could not be found!")]
        public string FileNotFound {
            get {
                return ((string)(this["FileNotFound"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Invalid location path!")]
        public string InvalidLocationPath {
            get {
                return ((string)(this["InvalidLocationPath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Open World")]
        public string OpenWorld {
            get {
                return ((string)(this["OpenWorld"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(" is already open!")]
        public string IsAlreadyOpen {
            get {
                return ((string)(this["IsAlreadyOpen"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("World created successfully!")]
        public string CreateWorldSuccess {
            get {
                return ((string)(this["CreateWorldSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Failed to create the new world project!")]
        public string CreateWorldFailed {
            get {
                return ((string)(this["CreateWorldFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Initialize cannot be called without Reset( ) being called first!")]
        public string AssetsInitializeError {
            get {
                return ((string)(this["AssetsInitializeError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("A sprite with this name already exists!")]
        public string SpriteWithSameNameExistsError {
            get {
                return ((string)(this["SpriteWithSameNameExistsError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you want to choose a new name?")]
        public string ChooseNewNameMsg {
            get {
                return ((string)(this["ChooseNewNameMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("New Sprite")]
        public string NewSpriteMsg {
            get {
                return ((string)(this["NewSpriteMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Type a new name for the sprite:")]
        public string SpriteTypeNewName {
            get {
                return ((string)(this["SpriteTypeNewName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("A font with this name already exists!")]
        public string FontWithSameNameExistsError {
            get {
                return ((string)(this["FontWithSameNameExistsError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("New Font")]
        public string NewFontMsg {
            get {
                return ((string)(this["NewFontMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Type a new name for the font:")]
        public string FontTypeNewName {
            get {
                return ((string)(this["FontTypeNewName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An actor with this name already exists!")]
        public string ActorTypeWithSameNameExistsError {
            get {
                return ((string)(this["ActorTypeWithSameNameExistsError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("New Actor")]
        public string NewActorTypeMsg {
            get {
                return ((string)(this["NewActorTypeMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Type a new name for the actor:")]
        public string ActorTypeTypeNewName {
            get {
                return ((string)(this["ActorTypeTypeNewName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("World loaded successfully!")]
        public string OpenWorldSuccess {
            get {
                return ((string)(this["OpenWorldSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("World saved successfully!")]
        public string SaveWorldSuccess {
            get {
                return ((string)(this["SaveWorldSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Level created successfully!")]
        public string CreateLevelSuccess {
            get {
                return ((string)(this["CreateLevelSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Level saved successfully!")]
        public string SaveLevelSuccess {
            get {
                return ((string)(this["SaveLevelSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Font created successfully!")]
        public string CreateFontSuccess {
            get {
                return ((string)(this["CreateFontSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(" font doesn\'t exist!")]
        public string CreateFontFailed {
            get {
                return ((string)(this["CreateFontFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Actor created successfully!")]
        public string CreateActorSuccess {
            get {
                return ((string)(this["CreateActorSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Sprite(s) imported successfully!")]
        public string ImportSpriteSuccess {
            get {
                return ((string)(this["ImportSpriteSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Failed to import the sprite(s) to the project!")]
        public string ImportSpriteFailed {
            get {
                return ((string)(this["ImportSpriteFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Levels saved successfully!")]
        public string SaveLevelsSuccess {
            get {
                return ((string)(this["SaveLevelsSuccess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(" directory couldn\'t be created!")]
        public string CreateDirectoryFailed {
            get {
                return ((string)(this["CreateDirectoryFailed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you wish to save the ")]
        public string SaveFilePrompt {
            get {
                return ((string)(this["SaveFilePrompt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("level")]
        public string LevelName {
            get {
                return ((string)(this["LevelName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("A level with the same name already exists!")]
        public string LevelWithSameNameExists {
            get {
                return ((string)(this["LevelWithSameNameExists"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("No object selected")]
        public string NoObjectSelected {
            get {
                return ((string)(this["NoObjectSelected"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Properties")]
        public string PropertiesName {
            get {
                return ((string)(this["PropertiesName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("This actor needs to have an assigned font asset in order to become a Text Actor!")]
        public string NoFontAssignedMsg {
            get {
                return ((string)(this["NoFontAssignedMsg"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("A script with this name already exists!")]
        public string ScriptWithSameNameExistsError {
            get {
                return ((string)(this["ScriptWithSameNameExistsError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("This font does not exist!")]
        public string FontDontExistError {
            get {
                return ((string)(this["FontDontExistError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("No Font Assigned")]
        public string NoFontAssigned {
            get {
                return ((string)(this["NoFontAssigned"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Are you sure you want to delete this layer?")]
        public string LayerDeletePrompt {
            get {
                return ((string)(this["LayerDeletePrompt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("A layer with this name already exists!")]
        public string LayerWithSameNameExistsError {
            get {
                return ((string)(this["LayerWithSameNameExistsError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you wish to save this script?")]
        public string ScriptSavePrompt {
            get {
                return ((string)(this["ScriptSavePrompt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("No Script Assigned")]
        public string NoScriptAssigned {
            get {
                return ((string)(this["NoScriptAssigned"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you want the changes to the selected actortype be applied to all it\'s instance" +
            "s?")]
        public string ActortypePropertyChangedPrompt {
            get {
                return ((string)(this["ActortypePropertyChangedPrompt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Actor will not be placed in the level because a valid Actortype wasn\'t found!")]
        public string ActortypeNotFoundError {
            get {
                return ((string)(this["ActortypeNotFoundError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Do you wish to save the assets before exiting?")]
        public string SaveAssetsPrompt {
            get {
                return ((string)(this["SaveAssetsPrompt"]));
            }
        }
    }
}
